services:
  # PostgreSQL - Almacenamiento de datos
  postgres:
    image: postgres:15-alpine
    container_name: event-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - event-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper para Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: event-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - event-network

  # Kafka - Sistema de mensajería
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: event-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - event-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Kafka UI - Interfaz web para monitoreo
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: event-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - event-network

  # Productor
  producer:
    build: ./producer
    container_name: event-producer
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BROKER}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      PRODUCER_INTERVAL: ${PRODUCER_INTERVAL}
    networks:
      - event-network
    restart: unless-stopped

  # Consumidor - 2 instancias para simular escalado
  consumer1:
    build: ./consumer
    container_name: event-consumer1
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      CONSUMER_ID: consumer-1
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BROKER}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KAFKA_GROUP_ID: ${CONSUMER_GROUP}
      CONSUMER_TIMEOUT: 30000
    networks:
      - event-network
    restart: unless-stopped

  consumer2:
    build: ./consumer
    container_name: event-consumer2
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      CONSUMER_ID: consumer-2
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BROKER}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KAFKA_GROUP_ID: ${CONSUMER_GROUP}
      CONSUMER_TIMEOUT: 30000
    networks:
      - event-network
    restart: unless-stopped

  # UI Web para monitoreo
  web-ui:
    build: ./ui
    container_name: event-web-ui
    depends_on:
      - postgres
    ports:
      - "5000:5000"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - event-network

  # pgAdmin para administración de PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: event-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@event.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8081:80"
    networks:
      - event-network
    depends_on:
      - postgres

networks:
  event-network:
    driver: bridge

volumes:
  postgres_data: